# Configuration for gallery_examples collection script
# This file externalizes URLs, mappings, and settings to make maintenance easier.

# ============================================================================
# Altair Dataset Name Mappings
# ============================================================================
#
# LEGACY SUPPORT: This section provides backward compatibility for Altair v5.x.
#
# As of Altair v6 (PR #3859, merged 2025-10-26), Altair uses canonical
# vega-datasets names directly. When tracking Altair main branch (v6+),
# this mapping section should remain empty.
#
# Manual mappings may be added if:
# 1. Tracking older Altair releases (v5.x) that use camelCase API names
# 2. Custom Altair forks with different naming conventions
# 3. Testing against historical Altair versions
#
# Format: altair_api_name = "canonical_datapackage_name"

[altair.name_mapping]
# Empty mapping section - kept for backward compatibility with Altair v5.x
#
# Altair v6+ (PR #3859, merged 2025-10-26) uses canonical vega-datasets names
# directly, so no mappings are needed when tracking Altair main branch.
#
# VERSION TRACKING: This configuration currently tracks Altair main branch (v6+).
# The git reference is hardcoded in generate_gallery_examples.py (line 1135).
# To track a specific Altair version, you must modify the Python script to use
# a different git ref (e.g., "v5.4.1" or "v6.0.0" instead of "main").
#
# TESTING WITH ALTAIR V5: If you need to regenerate examples from Altair v5.x
# (e.g., for comparison or regression testing):
# 1. Modify generate_gallery_examples.py to fetch from Altair v5.x tag
# 2. Uncomment the camelCase mappings below
# 3. Run the script to regenerate gallery_examples.json
# 4. After testing, restore this section and the script to v6+ configuration
#
# Altair v5.x mappings (uncomment if testing with v5.x):
# londonBoroughs = "london_boroughs"
# londonCentroids = "london_centroids"
# londonTubeLines = "london_tube_lines"

# ============================================================================
# Data Source URLs
# ============================================================================
#
# URLs for fetching gallery metadata and dataset catalog.
# All URLs point to the main/master branch for stable releases.

[sources]
# Vega-datasets canonical dataset catalog
datapackage_url = "https://raw.githubusercontent.com/vega/vega-datasets/main/datapackage.json"

# Vega-Lite gallery examples metadata
vega_lite_examples_url = "https://raw.githubusercontent.com/vega/vega-lite/main/site/_data/examples.json"

# Vega gallery examples metadata
vega_examples_url = "https://raw.githubusercontent.com/vega/vega/main/docs/_data/examples.json"

# Altair example directories
# The script fetches Python files from both syntax styles
#
# STABILITY NOTE: The script currently fetches from Altair's main branch
# (hardcoded in generate_gallery_examples.py). This tracks the latest Altair v6+
# development but creates a moving target dependency. For production stability,
# consider pinning to a specific Altair release tag after v6.0.0 is released.
#
# Current approach assumes Altair main is stable post-v6 merge (PR #3859).
altair_examples_dirs = [
    "tests/examples_methods_syntax",
    "tests/examples_arguments_syntax",
]

# ============================================================================
# Output Configuration
# ============================================================================
#
# Default output settings for the generated JSON file.

[output]
# Default output file path (relative to repository root)
# Can be overridden with --output CLI argument
default_output_path = "gallery_examples.json"

# Dry run mode (doesn't write output file)
# Can be overridden with --dry-run CLI flag
dry_run = false

# ============================================================================
# Network Settings
# ============================================================================
#
# HTTP request configuration for fetching remote resources.

[network]
# Timeout in seconds for HTTP requests
# Used for fetching metadata files and individual example specifications
timeout = 30

# Maximum number of retries for failed requests (future use)
# Currently not implemented, but reserved for potential retry logic
max_retries = 3
